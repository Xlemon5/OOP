#include "Angle.h"
#define _USE_MATH_DEFINES
#include <math.h>
#include <string>


Angle::Angle() : degrees(0), minutes(0) {}

Angle::Angle(int deg, int min) : degrees(deg), minutes(min) 
{
	normalize();
}

//Методы доступа
//SETTER

void Angle::setDegrees(int degr)
{
	degrees = degr;
	normalize();
}

void Angle::setMinutes(int minut)
{
	minutes = minut;
	normalize();
}



void Angle::normalize() {
	while (degrees >= 360) {
		degrees -= 360;
	}
	while (degrees < 0) {
		degrees += 360;
	}
}

//GETTER
int Angle::getDegrees()
{
	return degrees;
}

int Angle::getMinutes()
{
	return minutes;
}


// МЕТОДЫ ПО ЗАДАНИЮ
double Angle::toRadians()
{
	double totalDegrees = degrees + static_cast<double>(minutes) / 60.0;
	return totalDegrees * M_PI / 180.0;
}

double Angle::toRadians(int degr, int minut)
{
	double totalDegrees = degr + static_cast<double>(minut) / 60.0;
	return totalDegrees * M_PI / 180.0;
}

double Angle::toDegrees(double radians)
{
	return radians * 180.0 / M_PI;
}


// УЧЕСТЬ ЧТО 60 МИНУТ = 1 ГРАДУС
void Angle::increase(int degr, int minut)
{
	double radians = toRadians(); // перевели угол класса в радианы
	double dob_radians = toRadians(degr, minut);  // перевели добавляемое значение в радианы

	double result_rad = radians + dob_radians;

	double result_degrees = toDegrees(result_rad);


	degrees = int(result_degrees);
	minutes = (result_degrees - int(result_degrees)) * 60;

	normalize();
}

void Angle::decrease(int degr, int minut)
{
	double radians = toRadians(); // перевели угол класса в радианы
	double dob_radians = toRadians(degr, minut);  // перевели добавляемое значение в радианы

	double result_rad = radians - dob_radians;

	double result_degrees = toDegrees(result_rad);


	degrees = int(result_degrees);
	minutes = (result_degrees - int(result_degrees)) * 60;

	normalize();
}

double Angle::getSin()
{
	double radians = toRadians(degrees, minutes);
	return sin(radians);
}


// 1 вариант
int Angle::compareAngle(Angle & other)
{
	double angl_radians = toRadians();
	double other_radians = other.toRadians();

	if (angl_radians > other_radians)
	{
		return 1;
	}
	else if (angl_radians < other_radians)
	{
		return -1;
	}
	else
	{
		return 0;
	}
}


	//ОБЪЕКТ В ВИДЕ СТРОКИ
std::string Angle::toString()
{
	std::string temp = "Degrees " + std::to_string(degrees) + " " + "Minutes " + std::to_string(minutes);

	return temp;
}
