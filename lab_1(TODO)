#include <iostream>
#define _USE_MATH_DEFINES
#include <math.h>
#include <string>
using namespace std;


/*
    ПЕРЕДЕЛАТЬ

    ****  ПЕРЕВОДИТЬ ВСЕ В МИНУТЫ

    ****  1) УВЕЛИЧЕНИЕ/УМЕНЬШЕНИЕ: ПЕРЕДАВАТЬ КЛАСС В МЕТОД
          2) ПЕРЕДЕЛАТЬ ФУНКЦИЮ НОРМАЛИЗАЦИИ    (УЧЕСТЬ ВОЗМОЖНОСТЬ ОТРИЦАТЕЛЬНЫХ УГЛОВ)

 */


class Angle
{
private:
    int degrees;
    int minutes;



    //ПЕРЕДЕЛАТЬ
    void normalize()
    {
        while (degrees >= 360)
        {
            degrees -= 360;
        }
        while (degrees < 0)
        {
            degrees += 360;
        }
    }

public:
    // конструкторы
    Angle()
    {
        degrees = 0;
        minutes = 0;
    }

    Angle(int degr, int minut)
    {
        degrees = degr;
        minutes = minut;
        normalize();
    }

    void toMinute()
    {
        minutes = degrees * 60 + minutes;
        degrees = 0;
    }

    void toDegrees()
    {
        degrees = minutes / 60;
        minutes = minutes % 60;
    }



    //SETTER
    void setDegrees(int degr)
    {
        degrees = degr;
    }

    void setMinutes(int minut)
    {
        minutes = minut;
    }

    //GETTER
    int getDegrees()
    {
        return degrees;
    }

    int getMinutes()
    {
        return minutes;
    }



    // МЕТОДЫ ПО ЗАДАНИЮ
    double toRadians()
    {
        double totalDegrees = degrees + static_cast<double>(minutes) / 60.0;
        return totalDegrees * M_PI / 180.0;
    }


    double toRadians(int degr, int minut)
    {
        double totalDegrees = degr + static_cast<double>(minut) / 60.0;
        return totalDegrees * M_PI / 180.0;
    }



    void increase(Angle &other)
    {
        this->toMinute();
        other.toMinute();
        minutes += other.minutes;

        this->toDegrees();
        other.toDegrees();
    }

    void decrease(Angle &other)
    {
        this->toMinute();
        other.toMinute();
        minutes -= other.minutes;

        this->toDegrees();
        other.toDegrees();
    }


    double getSin()
    {
        double radians = toRadians(degrees, minutes);
        return sin(radians);
    }


    int compareAngle(Angle &other)
    {
        this->toMinute();
        other.toMinute();

        if (minutes > other.minutes)
        {
            return 1;
        }
        else if (minutes < other.minutes)
        {
            return -1;
        }
        else
        {
            return 0;
        }

        this->toDegrees();
        other.toDegrees();
    }


    string toString()
    {
        string temp = "Degrees " + to_string(degrees) +
                      " " + "Minutes " + to_string(minutes);

        return temp;
    }
};

int main()
{
    setlocale(LC_ALL, "Russian");

    Angle angle1(30, 50);

    Angle angle2(50, 32);

    cout << angle2.toString() << endl;

    angle2.decrease(angle1);

    cout << angle2.toString() << endl;




    return 0;
}
