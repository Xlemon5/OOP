#include <iostream>
#define _USE_MATH_DEFINES
#include <math.h>
#include <string>
using namespace std;

class Angle 
{
private:
	int degrees;
	int minutes;

	void normalize()
	{
		while (degrees >= 360) 
		{
			degrees -= 360;
		}
		while (degrees < 0) 
		{
			degrees += 360;
		}
	}

public:
	// конструкторы
	Angle() 
	{
		degrees = 0;
		minutes = 0;
	}

	Angle(int degr, int minut) 
	{
		degrees = degr;
		minutes = minut;
		normalize();
	}




	//Методы доступа
	//SETTER
	void setDegrees(int degr) 
	{
		degrees = degr;
		normalize();
	}

	void setMinutes(int minut)
	{
		minutes = minut;
		normalize();
	}

	//GETTER
	int getDegrees() 
	{
		return degrees;
	}

	int getMinutes()
	{
		return minutes;
	}





	// МЕТОДЫ ПО ЗАДАНИЮ
	double toRadians()
	{
		double totalDegrees = degrees + static_cast<double>(minutes) / 60.0;
		return totalDegrees * M_PI / 180.0;
	}

	double toRadians(int degr, int minut) 
	{
		double totalDegrees = degr + static_cast<double>(minut) / 60.0;
		return totalDegrees * M_PI / 180.0;
	}

	double toDegrees(double radians) 
	{
		return radians * 180.0 / M_PI;
	}


	// УЧЕСТЬ ЧТО 60 МИНУТ = 1 ГРАДУС
	void increase(int degr, int minut) 
	{
		double radians = toRadians(); // перевели угол класса в радианы
		double dob_radians = toRadians(degr, minut);  // перевели добавляемое значение в радианы

		double result_rad = radians + dob_radians;

		double result_degrees = toDegrees(result_rad);


		degrees = int(result_degrees);
		minutes = (result_degrees - int(result_degrees))*60 ;

		normalize();
	}

	void decrease(int degr, int minut)
	{
		double radians = toRadians(); // перевели угол класса в радианы
		double dob_radians = toRadians(degr, minut);  // перевели добавляемое значение в радианы

		double result_rad = radians - dob_radians;

		double result_degrees = toDegrees(result_rad);


		degrees = int(result_degrees);
		minutes = (result_degrees - int(result_degrees)) * 60;

		normalize();
	}

	double getSin() 
	{
		double radians = toRadians(degrees, minutes);
		return sin(radians);
	}


	// 1 вариант
	int compareAngle(Angle &other) 
	{
		double angl_radians = toRadians();
		double other_radians = other.toRadians();


		if (angl_radians > other_radians) 
		{
			return 1;
		}
		else if (angl_radians < other_radians) 
		{
			return -1;
		}
		else 
		{
			return 0;
		}

	}

	// 2 вариант
	int compare(const Angle& other) const {
		if (degrees < other.degrees) {
			return -1;
		}
		else if (degrees > other.degrees) {
			return 1;
		}
		else {
			if (minutes < other.minutes) {
				return -1;
			}
			else if (minutes > other.minutes) {
				return 1;
			}
			else {
				return 0;
			}
		}
	}


	//ОБЪЕКТ В ВИДЕ СТРОКИ
	string toString() 
	{
		string temp = "Degrees " + to_string(degrees) +
			" " + "Minutes " + to_string(minutes);

		return temp;
	}
};

int main() 
{
	setlocale(LC_ALL, "Russian");

	Angle angle1(38, 50);
	Angle angle2(50, 38);
	Angle angle3(180, 15);


	angle1.decrease(3, 50);
	angle2.increase(50, 32);
	angle3.increase(20, 38);

	cout << "Angle1 in radians: " << angle1.toRadians() << endl;
	cout << "Angle1: " << angle1.toString() << endl;

	cout << endl;
	cout << "Angle2: " << angle2.toString() << endl;
	cout << "Angle2: " << angle3.toString() << endl;

	cout << endl;


	int result = angle3.compare(angle2);
	if (result < 0) {
		cout << "Angle 3 is less than Angle 2" << endl;
	}
	else if (result > 0) {
		cout << "Angle 3 is greater than Angle 2" << endl;
	}
	else {
		cout << "Angle 3 is equal to Angle 2" << endl;
	}

	return 0;
}
