#include <iostream>
#include <iomanip>
using namespace std;

// СПРОСИТЬ ПРО ПУНКТ 5 - ПЕРЕГРУЖЕННЫЕ ОПЕРАЦИИ СРАВНЕНИЯ
// ЧТО ДЕЛАТЬ ДЛЯ МАТРИЦ?


class Matrix{
    private:
        int** mtr;
        int size;

    public:
        //КОНСТРУКТОР
        Matrix(int _size)
        {
            size = _size;
            mtr = new int * [size];
            for(int i = 0; i < size; i++)
            {
                mtr[i] = new int[size];
                for(int j = 0; j < size; j++)
                {
                    mtr[i][j] = 0;
                }
            }
        }

        //КОНСТРУКТОР КОПИРОВАНИЯ
        Matrix(const Matrix &other)
        {
            size = other.size;
            mtr = new int*[size];

            for(int i = 0; i < size; i++)
            {
                mtr[i] = new int[size];
                for(int j = 0; j < size; j++)
                {
                    mtr[i][j] = other.mtr[i][j];
                }
            }

        }

        //ДЕСТРУКТОР
        ~Matrix()
        {
            for(int i = 0; i < size; i++)
            {
                delete[] mtr[i];
            }
            delete[] mtr;
        }

        //ГЕТТЕР ДЛЯ РАЗМЕРНОСТИ
        int getSize()
        {
            return size;
        }

        //СЕТТЕР И ГЕТТЕР ДЛЯ ПОЛУЧЕНИЯ ЭЛЕМЕНТА
        void setElement(int row, int col, int value)
        {
            if (row >= 0 && row < size && col >= 0 && col < size)
            {
                mtr[row][col] = value;
            }
        }

        int getElement(int row, int col)
        {
            if (row >= 0 && row < size && col >= 0 && col < size)
            {
                return mtr[row][col];
            }
            return 0;
        }

        //РЕСАЙЗ
        void resize(int newSize) {
        if (newSize <= size) {
            return; // Новый размер не может быть меньше или равен текущему размеру
        }

        int** newMatrix = new int*[newSize];
        for (int i = 0; i < newSize; ++i) {
            newMatrix[i] = new int[newSize];
            for (int j = 0; j < newSize; ++j) {
                if (i < size && j < size) {
                    newMatrix[i][j] = mtr[i][j];
                } else {
                    newMatrix[i][j] = 0; // Заполняем нулями, если вне границы старой матрицы
                }
            }
        }

        // Удаляем старую матрицу и обновляем размер
        for (int i = 0; i < size; ++i) {
            delete[] mtr[i];
        }
        delete[] mtr;

        mtr = newMatrix;
        size = newSize;
    }

        //ВВОД С КЛАВИАТУРЫ
        void inputMatrix()
        {
            cout << "Введите значения: " << endl;
            for(int i = 0; i < size; i++)
            {
                for(int j = 0; j < size; j++)
                {
                    cin >> mtr[i][j];
                }
            }
        }

        //ПЕЧАТЬ МАТРИЦЫ
        void printMatrix()
        {
            cout << "Matrix: " << endl;
            for(int i = 0; i < size; i++)
            {
                for(int j = 0; j < size; j++)
                {
                    cout << setw(4) << mtr[i][j] << " ";
                }
                cout << endl;
            }
        }

        //ПЕРЕГРУЗКА АРИФМЕТИЧЕСКИХ ОПЕРАЦИЙ
        //перегрузка сложения (+)
        Matrix operator+(const Matrix &other)
        {
            Matrix otherCopy = Matrix(other);

            int newSize = (size > other.size) ? size : other.size;

            if(size > otherCopy.size)
            {
                otherCopy.resize(size);
            }
            else
            {
                this->resize(otherCopy.size);
            }

            Matrix result = Matrix(newSize);

            for(int i = 0; i < newSize; i++)
            {
                for(int j = 0; j < newSize; j++)
                {
                    result.mtr[i][j] = mtr[i][j] + otherCopy.mtr[i][j];
                }
            }

            return result;
        }

        //перегрузка вычитания (-)
        Matrix operator-(const Matrix &other)
        {
            Matrix otherCopy = Matrix(other);

            int newSize = (size > other.size) ? size : other.size;

            if(size > otherCopy.size)
            {
                otherCopy.resize(size);
            }
            else
            {
                this->resize(otherCopy.size);
            }

            Matrix result = Matrix(newSize);

            for(int i = 0; i < newSize; i++)
            {
                for(int j = 0; j < newSize; j++)
                {
                    result.mtr[i][j] = mtr[i][j] - otherCopy.mtr[i][j];
                }
            }

            return result;
        }

        //перегрузкка умножения (*)
        Matrix operator*(const Matrix &other)
        {
            Matrix otherCopy = Matrix(other);

            int newSize = (size > other.size) ? size : other.size;

            if(size > otherCopy.size)
            {
                otherCopy.resize(size);
            }
            else
            {
                this->resize(otherCopy.size);
            }

            Matrix result = Matrix(newSize);

            for(int i = 0; i < newSize; i++)
            {
                for(int j = 0; j < newSize; j++)
                {
                    result.mtr[i][j] = 0;
                    for(int k = 0; k < newSize; k++)
                    {
                        result.mtr[i][j] += mtr[i][k] * otherCopy.mtr[k][j];
                    }
                }
            }
            return result;
        }


        //ПЕРЕГРУЗКА ОПЕРАТОРА ПРИСВАИВАНИЯ
        Matrix operator=(const Matrix &other)
        {
            //ПРОВЕРКА, ЧТО ЭТО НЕ ПЕРЕПРИСВАИВАНИЕ САМОМУ СЕБЕ
            if(this == &other)
            {
                return *this;
            }

            //ОСВОБОЖДАЕМ ТЕКУЩУЮ ПАМЯТЬ
            for(int i = 0; i < size; i++)
            {
                delete[] mtr[i];
            }
            delete[] mtr;

            //ПЕРЕНОСИМ(КОПИРУЕМ)
            size = other.size;
            mtr = new int* [size];
            for(int i = 0; i < size; i++)
            {
                mtr[i] = new int [size];
                for(int j = 0; j < size; j++)
                {
                    mtr[i][j] = other.mtr[i][j];
                }
            }
            return *this;
        }


        //ПЕРЕГРУЗКА ОПЕРАТОРОВ << и >>

        Matrix& operator << (istream & in)
        {
            cout << "Введите значения матрицы: " << endl;
            for(int i = 0; i < size; i++)
            {
                for(int j = 0; j < size; j++)
                {
                    in >> mtr[i][j];
                }
            }
            return *this;
        }

        Matrix& operator >> (ostream & out)
        {
            for(int i = 0; i < size; i++)
            {
                for(int j = 0; j < size; j++)
                {
                    out << mtr[i][j] << " ";
                }
                out << endl;
            }
            return *this;
        }
};



int main()
{

    //Матрица А
    int sizeA = 0;
    cout << "Введите размерность матрицы A: " << endl;
    cin >> sizeA;

    Matrix matrA(sizeA);
    matrA << cin;

    cout << endl;
    cout << "Matrix: " << endl;
    matrA >> cout;

    cout << endl;
    //Матрица B

    int sizeB = 0;
    cout << "Введите размерность матрицы B: " << endl;
    cin >> sizeB;

    Matrix matrB(sizeB);
    matrB << cin;

    cout << endl;
    matrB >> cout;

    cout << endl;
    //Матрица С
    Matrix matrC = matrA + matrB;
    cout << "Матрица C" << endl;
    matrC >> cout;
    cout << endl;


    /*
    Matrix matCopy(matr);
    cout << endl;
    cout << "Скопированная матрица: "<<endl;
    matCopy.printMatrix();
    */

    /*
    //проверим на изменение элемента в матрице с которой скопировали значение
    //все отработало нормально!!!

    matr.setElement(0, 0, 10);

    cout << endl;
    matCopy.printMatrix();
    */

    return 0;
}
